// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package demojson

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF86940 = 1
	codecSelferCcRAW6940  = 255
	// ----- value types used ----
	codecSelferValueTypeArray6940     = 10
	codecSelferValueTypeMap6940       = 9
	codecSelferValueTypeString6940    = 6
	codecSelferValueTypeInt6940       = 2
	codecSelferValueTypeUint6940      = 3
	codecSelferValueTypeFloat6940     = 4
	codecSelferValueTypeNil6940       = 1
	codecSelferBitsize6940            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil6940 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct6940 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer6940 struct{}

func codecSelfer6940False() bool { return false }
func codecSelfer6940True() bool  { return true }

func init() {
	if codec1978.GenVersion != 20 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 20, need " + ver + ". Re-generate file: " + file))
	}
}

func (x *Book) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6940
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(5)
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.BookId))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Title))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Author))
			z.EncWriteArrayElem()
			r.EncodeFloat64(float64(x.Price))
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.Hot))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(5)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"id\"")
			} else {
				r.EncodeString(`id`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.BookId))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"title\"")
			} else {
				r.EncodeString(`title`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Title))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"author\"")
			} else {
				r.EncodeString(`author`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Author))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"price\"")
			} else {
				r.EncodeString(`price`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat64(float64(x.Price))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"hot\"")
			} else {
				r.EncodeString(`hot`)
			}
			z.EncWriteMapElemValue()
			r.EncodeBool(bool(x.Hot))
			z.EncWriteMapEnd()
		}
	}
}

func (x *Book) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6940
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil6940 {
		*(x) = Book{}
	} else if yyct2 == codecSelferValueTypeMap6940 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray6940 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6940)
	}
}

func (x *Book) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6940
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "id":
			x.BookId = (int64)(r.DecodeInt64())
		case "title":
			x.Title = (string)(string(r.DecodeStringAsBytes()))
		case "author":
			x.Author = (string)(string(r.DecodeStringAsBytes()))
		case "price":
			x.Price = (float64)(r.DecodeFloat64())
		case "hot":
			x.Hot = (bool)(r.DecodeBool())
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Book) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6940
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = z.DecCheckBreak()
	}
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.BookId = (int64)(r.DecodeInt64())
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = z.DecCheckBreak()
	}
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Title = (string)(string(r.DecodeStringAsBytes()))
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = z.DecCheckBreak()
	}
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Author = (string)(string(r.DecodeStringAsBytes()))
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = z.DecCheckBreak()
	}
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Price = (float64)(r.DecodeFloat64())
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = z.DecCheckBreak()
	}
	if yyb9 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Hot = (bool)(r.DecodeBool())
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = z.DecCheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
}

func (x *Book) IsCodecEmpty() bool {
	return !(x.BookId != 0 || x.Title != "" || x.Author != "" || x.Price != 0 || bool(x.Hot) || false)
}
